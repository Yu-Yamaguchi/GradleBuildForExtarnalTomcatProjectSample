/*
 使用技術に制限があり、Eclipse Tomcatプロジェクトで構築されたWebアプリケーションに対し、
 可能な限りTomcatプロジェクト内にファイルを追加することなく、外部からGradleによってビルドを行い、
 その結果をレポート出力するサンプルです。

 基本的に、定義しているタスクはいくつかありますが、gradle ci のタスクを中心に設定しています。
 gradle ci タスクを実行するだけで、内部で定義している全てのタスクが実行されます。
*/

// 全プロジェクト共通の設定
allprojects {
	apply plugin: "java"
	apply plugin: "war"
	apply plugin: "groovy"
	apply plugin: "findbugs"
	apply plugin: "jacoco"
	apply plugin: "checkstyle"

	// Javaのバージョンを指定
	sourceCompatibility = "1.8"
	targetCompatibility = "1.8"

	// 文字エンコーディングの設定
	def defaultEncoding = "UTF-8"
	tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }
	tasks.withType(GroovyCompile).each { it.groovyOptions.encoding = defaultEncoding }

	// 使用するリポジトリの指定
	repositories {
	    mavenCentral()
	}
}

// テスト対象となるプロジェクトの設定
project(":targetProject") {

	// 内部で利用する変数の定義【テスト対象プロジェクトに応じてここを修正】
	def targetProjectDir = "../TomcatProject"

	// $buildDirを変更。こうすることで、テスト対象プロジェクト内に「{ProjectDir}/build」フォルダが生成されることがなくなる。
	// また、gradlew cleanコマンドでbuildフォルダが正常に削除されるようになる。
	buildDir = "${rootProject.buildDir}"

	dependencies {
	    // テスト対象のプロジェクトは Eclipseの機能 新規＞プロジェクト＞Tomcatプロジェクトで作成されたプロジェクトのため、
	    // WEB-INF/lib配下に含まれないTomcatの依存関係を追加する必要がありました。
	    compile "org.apache.tomcat:tomcat-servlet-api:8.0.30"

	    // 対象プロジェクト内のlibを設定(ビルド時に使用）
	    compile fileTree(dir: "$targetProjectDir/WEB-INF/lib", include: "*.jar")
	    testCompile fileTree(dir: "$targetProjectDir/WEB-INF/lib", include: "*.jar")

	    // 最新のGoogleが提供しているcheckstyleの定義に対応するため、以下の依存関係を追加。
	    checkstyle "com.puppycrawl.tools:checkstyle:6.13"
	}
	
	// Tomcatプロジェクトの構成に合わせてsourceSetsを定義
	sourceSets {
	    main {
	        java { srcDir "$targetProjectDir/WEB-INF/src" }
	        resources { srcDir "$targetProjectDir/WEB-INF/resources" }
	    }
	    test {
	        java {srcDir "$targetProjectDir/WEB-INF/test/java" }
	        resources { srcDir "$targetProjectDir/WEB-INF/test/resources" }
	    }
	}

	/****** findbugsの設定 ******/
	// レポートの出力形式をHTMLに変更
	tasks.withType(FindBugs) {
	    reports {
	        xml.enabled = false
	        html.enabled = true
	    }
	}

	// findbugsのその他設定
	findbugs {
	    sourceSets = [sourceSets.main]
	    ignoreFailures = true
	    reportsDir = file("$buildDir/reports/findbugs")
	    effort = "max"
	    reportLevel = "high"
	}

	/****** jacocoによるカバレッジレポート出力の設定 ******/
	// jacocoの設定
	jacoco {
	    toolVersion = "0.7.+"
	    reportsDir = file("$buildDir/reports/jacoco")
	}

	/**
     * jacocoによるコードカバレッジレポートを出力する定義。
     * 出力はHTMLに設定。
     */
	task jacoco(type: JacocoReport) {
	    /*
	     jacocoのカバレッジレポート出力に必要な「***.exec」ファイルは、
	     デフォルトのままだと「test.exec」という名前のファイルとなり、
	     dependsOnで指定したタスクが「test」以外の場合、タスク名＋.execファイルが生成されるため、
	     jacocoのカバレッジレポートが出力されない。
	     
	     この例だと「testAll.exec」ファイルができてしまう。
	     そのため、executionDataを以下のようにセットする。
	     ※さらに、executionDataはFileオブジェクトではなくFileCollectionオブジェクトのため、
	     　filesでパスを指定する。
	    */
	    executionData = files("$buildDir/jacoco/testAll.exec")

	    sourceSets sourceSets.main
	    
	    // HTMLのレポートのみ出力
	    reports {
	        html.enabled = true
	        xml.enabled = false
	        csv.enabled = false
	    }
	}

	/****** checkstyleの設定 ******/
	// mainソースに対するcheckstyleの設定
	checkstyleMain {
	    checkstyleMain.configFile = file("$targetProjectDir/WEB-INF/config/checkstyle.xml")
	    // ディレクトリ設定値の確認
	    println "buildDir : ${buildDir}"
	    println "rootProject.buildDir : ${rootProject.buildDir}"
	    checkstyleMain.reports.xml.destination = "$buildDir/reports/checkstyle/main.xml"
	}

	// testソースに対するcheckstyleの設定（テストは対象外とする）
	checkstyleTest {
	  checkstyleTest.configFile = file("$targetProjectDir/WEB-INF/config/checkstyle.xml")
	  excludes = ["**/*"]
	}

	// checkstyleの結果xmlからHTMLのレポートを出力するタスクの定義
	task checkstyleReport << {
	    if (file("$buildDir/reports/checkstyle/main.xml").exists()) {
	        ant.xslt(in: "$buildDir/reports/checkstyle/main.xml",
	            style:"${rootProject.rootDir}/config/checkstyle-noframes-sorted.xsl",
	            out:"$buildDir/reports/checkstyle/checkstyle.html"
	        )
	    } else {
	        println("先に gradlew check を実行してください＞＜")
	    }
	}

	/****** 自作のタスク ******/
	// テストクラスでは、@SuiteClassesを指定して、まとめてテストを実行可能としています。
	// そのため、全クラスのテスト実行ではなく、特定のTest Suiteのみを実行するよう自作のタスクを作成します。
	task testAll(type: Test) {
	    include "**/AllTests.class"
	    reports.junitXml.destination "$buildDir/test-results/testAll"
	    reports.html.destination = "$buildDir/reports/testAll"
	}
	
	/**
     * 標準タスク「check」は、依存関係として「test」タスクを実行してしまう。
	 * testタスクでは、全テストクラス（TestSuite含む）が実行されてしまうため、TestSuiteを使用している場合、
     * 全てのテストが2回実行されることになってしまう。
     * そのため、標準の「test」タスクを除外し、独自タスクである「testAll」を紐づけるように修正。
	 */
	check.dependsOn -= test
	check.dependsOn += testAll

	/**
     * CI用のタスクです。
     * 依存関係としてcleanとcheckを依存関係に指定していますが、
     * 実際には以下のタスクが実行されます。
     * ・clean … 全てのタスク実行前にクリーンする。
     * ・findbugs … findbugsはcheckタスクの依存関係に標準でセットされているため、check実行時に、先行して実行される。
     * ・testAll … check.dependsOn += testAllで依存関係をセットしているため、check実行時に、先行して実行される。
     * ・check … checkstyleの実行
     * ・checkstyleReport … check実行結果のxmlからHTMLのレポートを出力
     * ・jacoco … jacocoによるコードカバレッジレポートをHTML形式で出力
     */
	task ci(dependsOn: ['clean', 'check', 'checkstyleReport', 'jacoco']) {
		description = "JenkinsにのせてCIやりたいときなどに使う独自タスクの定義です。" + System.properties['line.separator'] +
						"      このciタスクでは以下の処理を行います。" + System.properties['line.separator'] +
						"      ・clean" + System.properties['line.separator'] +
						"      ・findbugs" + System.properties['line.separator'] +
						"      ・testAll … 独自定義の全テスト実行タスク（Test Suiteを指定したテストの実行）" + System.properties['line.separator'] +
						"      ・check … checkstyleの実行" + System.properties['line.separator'] +
						"      ・checkstyleReport … check実行結果のxmlからHTMLのレポートを出力" + System.properties['line.separator'] +
						"      ・jacoco … jacocoによるコードカバレッジレポートをHTML形式で出力"

		check.mustRunAfter clean
		checkstyleReport.mustRunAfter check
	}
}
